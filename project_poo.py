# -*- coding: utf-8 -*-
"""project_poo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/R5780/09159bccfc2381494cdd805cf283b48e/project_poo.ipynb
"""

from google.colab import files
uploaded = files.upload()

class DNASequence:
    def __init__(self, sequence, label=None):
        self.sequence = sequence.replace('\t', '')
        self.label = label
        self.encoded = None

    def one_hot_encode(self):
        mapping = {
            'A': [1, 0, 0, 0],
            'C': [0, 1, 0, 0],
            'G': [0, 0, 1, 0],
            'T': [0, 0, 0, 1]
        }
        self.encoded = []
        for nucleotide in self.sequence:
            self.encoded.extend(mapping.get(nucleotide, [0, 0, 0, 0]))
        return self.encoded

    def __str__(self):
        return f"DNASequence(sequence={self.sequence[:10]}..., label={self.label})"

import pandas as pd

# قراءة ملف CSV
df = pd.read_csv("dna_sequences.csv")

# التأكد من شكل البيانات
print(df.head())

# تحويل كل صف إلى كائن من نوع DNASequence
sequences = []
for i, row in df.iterrows():
    seq_str = ''.join(map(str, row[:-1]))
    label = row["Class"]
    seq_obj = DNASequence(seq_str, label)
    seq_obj.one_hot_encode()
    sequences.append(seq_obj)

print(f"عدد التسلسلات: {len(sequences)}")
print(sequences[0])

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import numpy as np

# تجهيز البيانات
X = np.array([s.encoded for s in sequences])
y = np.array([1 if s.label == '+' else 0 for s in sequences])

# تقسيم البيانات
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# تدريب النموذج
model = RandomForestClassifier()
model.fit(X_train, y_train)

# التقييم
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x="Class", data=df)
plt.title("Répartition des classes")
plt.xlabel("Classe")
plt.ylabel("Nombre de séquences")
plt.show()